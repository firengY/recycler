package com.example.jp;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.example.jp.NBA;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "NBA".
*/
public class NBADao extends AbstractDao<NBA, Long> {

    public static final String TABLENAME = "NBA";

    /**
     * Properties of entity NBA.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Imagesrc = new Property(1, String.class, "imagesrc", false, "IMAGESRC");
        public final static Property Digest = new Property(2, String.class, "digest", false, "DIGEST");
        public final static Property ReplyCount = new Property(3, String.class, "replyCount", false, "REPLY_COUNT");
        public final static Property HasAD = new Property(4, Integer.class, "hasAD", false, "HAS_AD");
        public final static Property SkipType = new Property(5, String.class, "skipType", false, "SKIP_TYPE");
        public final static Property Imgsrc = new Property(6, String.class, "imgsrc", false, "IMGSRC");
        public final static Property Title = new Property(7, String.class, "title", false, "TITLE");
        public final static Property Url_3w = new Property(8, String.class, "url_3w", false, "URL_3W");
    };


    public NBADao(DaoConfig config) {
        super(config);
    }
    
    public NBADao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"NBA\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"IMAGESRC\" TEXT," + // 1: imagesrc
                "\"DIGEST\" TEXT," + // 2: digest
                "\"REPLY_COUNT\" TEXT," + // 3: replyCount
                "\"HAS_AD\" INTEGER," + // 4: hasAD
                "\"SKIP_TYPE\" TEXT," + // 5: skipType
                "\"IMGSRC\" TEXT," + // 6: imgsrc
                "\"TITLE\" TEXT," + // 7: title
                "\"URL_3W\" TEXT);"); // 8: url_3w
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"NBA\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, NBA entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String imagesrc = entity.getImagesrc();
        if (imagesrc != null) {
            stmt.bindString(2, imagesrc);
        }
 
        String digest = entity.getDigest();
        if (digest != null) {
            stmt.bindString(3, digest);
        }
 
        String replyCount = entity.getReplyCount();
        if (replyCount != null) {
            stmt.bindString(4, replyCount);
        }
 
        Integer hasAD = entity.getHasAD();
        if (hasAD != null) {
            stmt.bindLong(5, hasAD);
        }
 
        String skipType = entity.getSkipType();
        if (skipType != null) {
            stmt.bindString(6, skipType);
        }
 
        String imgsrc = entity.getImgsrc();
        if (imgsrc != null) {
            stmt.bindString(7, imgsrc);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(8, title);
        }
 
        String url_3w = entity.getUrl_3w();
        if (url_3w != null) {
            stmt.bindString(9, url_3w);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public NBA readEntity(Cursor cursor, int offset) {
        NBA entity = new NBA( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // imagesrc
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // digest
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // replyCount
            cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4), // hasAD
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // skipType
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // imgsrc
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // title
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8) // url_3w
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, NBA entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setImagesrc(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setDigest(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setReplyCount(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setHasAD(cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4));
        entity.setSkipType(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setImgsrc(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setTitle(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setUrl_3w(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(NBA entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(NBA entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
